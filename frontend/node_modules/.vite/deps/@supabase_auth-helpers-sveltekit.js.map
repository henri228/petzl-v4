{
  "version": 3,
  "sources": ["../../@supabase/auth-helpers-sveltekit/dist/config.js", "../../node_modules/.pnpm/tsup@5.12.9/node_modules/tsup/assets/esm_shims.js", "../../node_modules/.pnpm/cookie@0.5.0/node_modules/cookie/index.js", "../../@supabase/auth-helpers-shared/src/index.ts", "../../@supabase/auth-helpers-shared/src/supabase-browser.ts", "../../@supabase/auth-helpers-shared/src/utils/cookies.ts", "../../@supabase/auth-helpers-shared/src/utils/helpers.ts", "../../@supabase/auth-helpers-shared/src/supabase-server.ts", "../../@supabase/auth-helpers-shared/src/types.ts", "../../@supabase/auth-helpers-shared/src/utils/index.ts", "../../@supabase/auth-helpers-shared/src/utils/errors.ts", "../../@supabase/auth-helpers-sveltekit/dist/utils/supabase-load.js", "../../@supabase/auth-helpers-sveltekit/dist/utils/supabase-request.js", "../../@supabase/auth-helpers-sveltekit/dist/utils/getSupabase.js", "../../@supabase/auth-helpers-sveltekit/dist/utils/getServerSession.js", "../../@supabase/auth-helpers-sveltekit/dist/constants.js", "../../@supabase/auth-helpers-sveltekit/dist/createClient.js"],
  "sourcesContent": ["let config;\nexport function setConfig(value) {\n    config = value;\n}\nexport function getConfig() {\n    return config;\n}\n", "// Shim globals in esm bundle\nimport { fileURLToPath } from 'url'\nimport path from 'path'\n\nconst getFilename = () => fileURLToPath(import.meta.url)\nconst getDirname = () => path.dirname(getFilename())\n\nexport const __dirname = /* @__PURE__ */ getDirname()\nexport const __filename = /* @__PURE__ */ getFilename()\n", "/*!\n * cookie\n * Copyright(c) 2012-2014 Roman Shtylman\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n * @public\n */\n\nexports.parse = parse;\nexports.serialize = serialize;\n\n/**\n * Module variables.\n * @private\n */\n\nvar __toString = Object.prototype.toString\n\n/**\n * RegExp to match field-content in RFC 7230 sec 3.2\n *\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n * field-vchar   = VCHAR / obs-text\n * obs-text      = %x80-FF\n */\n\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\n/**\n * Parse a cookie header.\n *\n * Parse the given cookie header string into an object\n * The object has the various cookies as keys(names) => values\n *\n * @param {string} str\n * @param {object} [options]\n * @return {object}\n * @public\n */\n\nfunction parse(str, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('argument str must be a string');\n  }\n\n  var obj = {}\n  var opt = options || {};\n  var dec = opt.decode || decode;\n\n  var index = 0\n  while (index < str.length) {\n    var eqIdx = str.indexOf('=', index)\n\n    // no more cookie pairs\n    if (eqIdx === -1) {\n      break\n    }\n\n    var endIdx = str.indexOf(';', index)\n\n    if (endIdx === -1) {\n      endIdx = str.length\n    } else if (endIdx < eqIdx) {\n      // backtrack on prior semicolon\n      index = str.lastIndexOf(';', eqIdx - 1) + 1\n      continue\n    }\n\n    var key = str.slice(index, eqIdx).trim()\n\n    // only assign once\n    if (undefined === obj[key]) {\n      var val = str.slice(eqIdx + 1, endIdx).trim()\n\n      // quoted values\n      if (val.charCodeAt(0) === 0x22) {\n        val = val.slice(1, -1)\n      }\n\n      obj[key] = tryDecode(val, dec);\n    }\n\n    index = endIdx + 1\n  }\n\n  return obj;\n}\n\n/**\n * Serialize data into a cookie header.\n *\n * Serialize the a name value pair into a cookie string suitable for\n * http headers. An optional options object specified cookie parameters.\n *\n * serialize('foo', 'bar', { httpOnly: true })\n *   => \"foo=bar; httpOnly\"\n *\n * @param {string} name\n * @param {string} val\n * @param {object} [options]\n * @return {string}\n * @public\n */\n\nfunction serialize(name, val, options) {\n  var opt = options || {};\n  var enc = opt.encode || encode;\n\n  if (typeof enc !== 'function') {\n    throw new TypeError('option encode is invalid');\n  }\n\n  if (!fieldContentRegExp.test(name)) {\n    throw new TypeError('argument name is invalid');\n  }\n\n  var value = enc(val);\n\n  if (value && !fieldContentRegExp.test(value)) {\n    throw new TypeError('argument val is invalid');\n  }\n\n  var str = name + '=' + value;\n\n  if (null != opt.maxAge) {\n    var maxAge = opt.maxAge - 0;\n\n    if (isNaN(maxAge) || !isFinite(maxAge)) {\n      throw new TypeError('option maxAge is invalid')\n    }\n\n    str += '; Max-Age=' + Math.floor(maxAge);\n  }\n\n  if (opt.domain) {\n    if (!fieldContentRegExp.test(opt.domain)) {\n      throw new TypeError('option domain is invalid');\n    }\n\n    str += '; Domain=' + opt.domain;\n  }\n\n  if (opt.path) {\n    if (!fieldContentRegExp.test(opt.path)) {\n      throw new TypeError('option path is invalid');\n    }\n\n    str += '; Path=' + opt.path;\n  }\n\n  if (opt.expires) {\n    var expires = opt.expires\n\n    if (!isDate(expires) || isNaN(expires.valueOf())) {\n      throw new TypeError('option expires is invalid');\n    }\n\n    str += '; Expires=' + expires.toUTCString()\n  }\n\n  if (opt.httpOnly) {\n    str += '; HttpOnly';\n  }\n\n  if (opt.secure) {\n    str += '; Secure';\n  }\n\n  if (opt.priority) {\n    var priority = typeof opt.priority === 'string'\n      ? opt.priority.toLowerCase()\n      : opt.priority\n\n    switch (priority) {\n      case 'low':\n        str += '; Priority=Low'\n        break\n      case 'medium':\n        str += '; Priority=Medium'\n        break\n      case 'high':\n        str += '; Priority=High'\n        break\n      default:\n        throw new TypeError('option priority is invalid')\n    }\n  }\n\n  if (opt.sameSite) {\n    var sameSite = typeof opt.sameSite === 'string'\n      ? opt.sameSite.toLowerCase() : opt.sameSite;\n\n    switch (sameSite) {\n      case true:\n        str += '; SameSite=Strict';\n        break;\n      case 'lax':\n        str += '; SameSite=Lax';\n        break;\n      case 'strict':\n        str += '; SameSite=Strict';\n        break;\n      case 'none':\n        str += '; SameSite=None';\n        break;\n      default:\n        throw new TypeError('option sameSite is invalid');\n    }\n  }\n\n  return str;\n}\n\n/**\n * URL-decode string value. Optimized to skip native call when no %.\n *\n * @param {string} str\n * @returns {string}\n */\n\nfunction decode (str) {\n  return str.indexOf('%') !== -1\n    ? decodeURIComponent(str)\n    : str\n}\n\n/**\n * URL-encode value.\n *\n * @param {string} str\n * @returns {string}\n */\n\nfunction encode (val) {\n  return encodeURIComponent(val)\n}\n\n/**\n * Determine if value is a Date.\n *\n * @param {*} val\n * @private\n */\n\nfunction isDate (val) {\n  return __toString.call(val) === '[object Date]' ||\n    val instanceof Date\n}\n\n/**\n * Try decoding a string using a decoding function.\n *\n * @param {string} str\n * @param {function} decode\n * @private\n */\n\nfunction tryDecode(str, decode) {\n  try {\n    return decode(str);\n  } catch (e) {\n    return str;\n  }\n}\n", "export * from './supabase-browser';\nexport * from './supabase-server';\nexport * from './types';\nexport * from './utils';\n", "import { createClient, Session } from '@supabase/supabase-js';\nimport { parse, serialize } from 'cookie';\nimport { CookieOptions, SupabaseClientOptionsWithoutAuth } from './types';\nimport { parseSupabaseCookie, stringifySupabaseSession } from './utils/cookies';\nimport { isBrowser } from './utils/helpers';\n\nexport function createBrowserSupabaseClient<\n  Database = any,\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\n    ? 'public'\n    : string & keyof Database\n>({\n  supabaseUrl,\n  supabaseKey,\n  options,\n  cookieOptions: {\n    name = 'supabase-auth-token',\n    domain,\n    path = '/',\n    sameSite = 'lax',\n    secure,\n    maxAge = 1000 * 60 * 60 * 24 * 365\n  } = {}\n}: {\n  supabaseUrl: string;\n  supabaseKey: string;\n  options?: SupabaseClientOptionsWithoutAuth<SchemaName>;\n  cookieOptions?: CookieOptions;\n}) {\n  return createClient<Database, SchemaName>(supabaseUrl, supabaseKey, {\n    ...options,\n    auth: {\n      storageKey: name,\n      storage: {\n        getItem(key: string) {\n          if (!isBrowser()) {\n            return null;\n          }\n\n          const cookies = parse(document.cookie);\n          const session = parseSupabaseCookie(cookies[key]);\n\n          return session ? JSON.stringify(session) : null;\n        },\n        setItem(key: string, _value: string) {\n          if (!isBrowser()) {\n            return;\n          }\n\n          let session: Session = JSON.parse(_value);\n          const value = stringifySupabaseSession(session);\n\n          document.cookie = serialize(key, value, {\n            domain,\n            path,\n            maxAge,\n            // Allow supabase-js on the client to read the cookie as well\n            httpOnly: false,\n            sameSite,\n            secure: secure ?? document.location?.protocol === 'https:'\n          });\n        },\n        removeItem(key: string) {\n          if (!isBrowser()) {\n            return;\n          }\n\n          document.cookie = serialize(key, '', {\n            domain,\n            path,\n            expires: new Date(0),\n            httpOnly: false,\n            sameSite,\n            secure\n          });\n        }\n      }\n    }\n  });\n}\n", "import { Session } from '@supabase/supabase-js';\nimport { parse, serialize } from 'cookie';\n\nexport { parse as parseCookies, serialize as serializeCookie };\n\n/**\n * Filter out the cookies based on a key\n */\nexport function filterCookies(cookies: string[], key: string) {\n  const indexes = new Set(\n    cookies\n      .map((cookie) => parse(cookie))\n      .reduce((acc, cookie, i) => {\n        if (key in cookie) {\n          acc.push(i);\n        }\n\n        return acc;\n      }, new Array<number>())\n  );\n\n  return cookies.filter((_, i) => !indexes.has(i));\n}\n\n/**\n * Based on the environment and the request we know if a secure cookie can be set.\n */\nexport function isSecureEnvironment(headerHost?: string | string[]) {\n  if (!headerHost) {\n    throw new Error('The \"host\" request header is not available');\n  }\n\n  const headerHostStr = Array.isArray(headerHost) ? headerHost[0] : headerHost;\n\n  const host =\n    (headerHostStr.indexOf(':') > -1 && headerHostStr.split(':')[0]) ||\n    headerHostStr;\n  if (\n    ['localhost', '127.0.0.1'].indexOf(host) > -1 ||\n    host.endsWith('.local')\n  ) {\n    return false;\n  }\n\n  return true;\n}\n\nconst decodeBase64URL = (value: string): string => {\n  try {\n    // atob is present in all browsers and nodejs >= 16\n    // but if it is not it will throw a ReferenceError in which case we can try to use Buffer\n    // replace are here to convert the Base64-URL into Base64 which is what atob supports\n    // replace with //g regex acts like replaceAll\n    // Decoding base64 to UTF8 see https://stackoverflow.com/a/30106551/17622044\n    return decodeURIComponent(\n      atob(value.replace(/[-]/g, '+').replace(/[_]/g, '/'))\n        .split('')\n        .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\n        .join('')\n    );\n  } catch (e) {\n    if (e instanceof ReferenceError) {\n      // running on nodejs < 16\n      // Buffer supports Base64-URL transparently\n      return Buffer.from(value, 'base64').toString('utf-8');\n    } else {\n      throw e;\n    }\n  }\n};\n\nexport function parseSupabaseCookie(\n  str: string | null | undefined\n): Partial<Session> | null {\n  if (!str) {\n    return null;\n  }\n\n  try {\n    const session = JSON.parse(str);\n    if (!session) {\n      return null;\n    }\n    // Support previous cookie which was a stringified session object.\n    if (session.constructor.name === 'Object') {\n      return session;\n    }\n    if (session.constructor.name !== 'Array') {\n      throw new Error(`Unexpected format: ${session.constructor.name}`);\n    }\n\n    const [_header, payloadStr, _signature] = session[0].split('.');\n    const payload = decodeBase64URL(payloadStr);\n\n    const { exp, sub, ...user } = JSON.parse(payload);\n\n    return {\n      expires_at: exp,\n      expires_in: exp - Math.round(Date.now() / 1000),\n      token_type: 'bearer',\n      access_token: session[0],\n      refresh_token: session[1],\n      provider_token: session[2],\n      provider_refresh_token: session[3],\n      user: {\n        id: sub,\n        ...user\n      }\n    };\n  } catch (err) {\n    console.warn('Failed to parse cookie string:', err);\n    return null;\n  }\n}\n\nexport function stringifySupabaseSession(session: Session): string {\n  return JSON.stringify([\n    session.access_token,\n    session.refresh_token,\n    session.provider_token,\n    session.provider_refresh_token\n  ]);\n}\n", "export function ensureArray<T>(data: T | T[]): T[] {\n  return Array.isArray(data) ? data : [data];\n}\n\nexport function isBrowser() {\n  return typeof window !== 'undefined';\n}\n", "import { createClient, Session } from '@supabase/supabase-js';\nimport type { CookieSerializeOptions } from 'cookie';\nimport { CookieOptions, SupabaseClientOptionsWithoutAuth } from './types';\nimport {\n  isSecureEnvironment,\n  parseSupabaseCookie,\n  stringifySupabaseSession\n} from './utils/cookies';\n\nexport function createServerSupabaseClient<\n  Database = any,\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\n    ? 'public'\n    : string & keyof Database\n>({\n  supabaseUrl,\n  supabaseKey,\n  getCookie,\n  setCookie,\n  getRequestHeader,\n  options,\n  cookieOptions: {\n    name = 'supabase-auth-token',\n    domain,\n    path = '/',\n    sameSite = 'lax',\n    secure,\n    maxAge = 1000 * 60 * 60 * 24 * 365\n  } = {}\n}: {\n  supabaseUrl: string;\n  supabaseKey: string;\n  getCookie: (name: string) => string | undefined;\n  setCookie: (\n    name: string,\n    value: string,\n    options: CookieSerializeOptions\n  ) => void;\n  getRequestHeader: (name: string) => string | string[] | undefined;\n  options?: SupabaseClientOptionsWithoutAuth<SchemaName>;\n  cookieOptions?: CookieOptions;\n}) {\n  let currentSession = parseSupabaseCookie(getCookie(name)) ?? null;\n\n  return createClient<Database, SchemaName>(supabaseUrl, supabaseKey, {\n    ...options,\n    auth: {\n      detectSessionInUrl: false,\n      autoRefreshToken: false,\n      storageKey: name,\n      storage: {\n        getItem(key: string) {\n          return JSON.stringify(currentSession);\n        },\n        setItem(key: string, _value: string) {\n          let session: Session = JSON.parse(_value);\n          const value = stringifySupabaseSession(session);\n\n          currentSession = session;\n\n          setCookie(key, value, {\n            domain,\n            path,\n            maxAge,\n            // Allow supabase-js on the client to read the cookie as well\n            httpOnly: false,\n            sameSite,\n            secure: secure ?? isSecureEnvironment(getRequestHeader('host'))\n          });\n        },\n        removeItem(key: string) {\n          // don't remove the session if there isn't one\n          if (!currentSession) {\n            return;\n          }\n\n          setCookie(key, '', {\n            domain,\n            path,\n            expires: new Date(0),\n            httpOnly: false,\n            sameSite,\n            secure: secure ?? isSecureEnvironment(getRequestHeader('host'))\n          });\n        }\n      }\n    }\n  });\n}\n", "import type { CookieSerializeOptions } from 'cookie';\nimport type { SupabaseClientOptions } from '@supabase/supabase-js';\n\nexport type CookieOptions = { name?: string } & Pick<\n  CookieSerializeOptions,\n  'domain' | 'secure' | 'path' | 'sameSite' | 'maxAge'\n>;\n\nexport type SupabaseClientOptionsWithoutAuth<T = 'public'> = Omit<\n  SupabaseClientOptions<T>,\n  'auth'\n>;\n", "export {\n  AccessTokenNotFound,\n  AuthHelperError,\n  CookieNotFound,\n  CookieNotSaved,\n  CallbackUrlFailed,\n  CookieNotParsed,\n  JWTPayloadFailed,\n  JWTInvalid,\n  RefreshTokenNotFound,\n  ProviderTokenNotFound,\n  type ErrorPayload\n} from './errors';\n\nexport { parseCookies, serializeCookie, filterCookies } from './cookies';\nexport { ensureArray, isBrowser } from './helpers';\n", "export interface ErrorPayload {\n  type?: string;\n  message: string;\n  source?: string;\n}\n\nexport class AuthHelperError extends Error {\n  errorType: string;\n  source: string;\n\n  constructor(message: string, errorType: string) {\n    super(message);\n    this.errorType = errorType;\n    this.source = 'sb_auth_helpers';\n  }\n\n  toObj(): ErrorPayload {\n    return {\n      type: this.errorType,\n      message: this.message,\n      source: this.source\n    };\n  }\n\n  toString() {\n    return JSON.stringify(this.toObj());\n  }\n}\n\nexport class CookieNotFound extends AuthHelperError {\n  constructor() {\n    super('No cookie was found!', 'cookie_not_found');\n  }\n}\n\nexport class CookieNotSaved extends AuthHelperError {\n  constructor() {\n    super('Cookies cannot be saved!', 'cookie_not_saved');\n  }\n}\n\nexport class AccessTokenNotFound extends AuthHelperError {\n  constructor() {\n    super('No access token was found!', 'cookie_not_found');\n  }\n}\n\nexport class RefreshTokenNotFound extends AuthHelperError {\n  constructor() {\n    super('No refresh token was found!', 'cookie_not_found');\n  }\n}\n\nexport class ProviderTokenNotFound extends AuthHelperError {\n  constructor() {\n    super('No provider token was found!', 'cookie_not_found');\n  }\n}\n\nexport class CookieNotParsed extends AuthHelperError {\n  constructor() {\n    super('Not able to parse cookies!', 'cookie_not_parsed');\n  }\n}\n\nexport class CallbackUrlFailed extends AuthHelperError {\n  constructor(callbackUrl: string) {\n    super(`The request to ${callbackUrl} failed!`, 'callback_url_failed');\n  }\n}\n\nexport class JWTPayloadFailed extends AuthHelperError {\n  constructor() {\n    super('Not able to parse JWT payload!', 'jwt_payload_failed');\n  }\n}\n\nexport class JWTInvalid extends AuthHelperError {\n  constructor() {\n    super('Invalid jwt!', 'jwt_invalid');\n  }\n}\n", "import { getConfig } from '../config.js';\nimport { isBrowser } from '@supabase/auth-helpers-shared';\nimport { createClient } from '@supabase/supabase-js';\nexport function getLoadSupabaseClient(event) {\n    const { supabaseUrl, supabaseKey, options, globalInstance } = getConfig();\n    if (isBrowser()) {\n        return globalInstance;\n    }\n    return createClient(supabaseUrl, supabaseKey, {\n        ...options,\n        auth: {\n            autoRefreshToken: false,\n            storage: {\n                async getItem(key) {\n                    let session = null;\n                    if (typeof event.data?.session !== 'undefined') {\n                        session = event.data.session;\n                    }\n                    else {\n                        const parentData = await event.parent();\n                        session = parentData?.session;\n                    }\n                    return session ? JSON.stringify(session) : null;\n                },\n                removeItem(key) {\n                    // this should not be needed\n                    // we are inside load on the server, the session should be valid for atleast 60 seconds\n                    // or not valid at all\n                },\n                setItem(key, value) {\n                    // this should not be needed\n                    // we are inside load on the server, the session should be valid for atleast 60 seconds\n                    // or not valid at all\n                }\n            }\n        }\n    });\n}\n", "import { getConfig } from '../config.js';\nimport { createServerSupabaseClient } from '@supabase/auth-helpers-shared';\nconst CACHE_KEY = Symbol('supabase-client');\nexport function getRequestSupabaseClient(event) {\n    const { cookies, request } = event;\n    const locals = event.locals;\n    if (locals[CACHE_KEY]) {\n        return locals[CACHE_KEY];\n    }\n    const { supabaseUrl, supabaseKey, options, cookieOptions } = getConfig();\n    const client = createServerSupabaseClient({\n        supabaseUrl,\n        supabaseKey,\n        getCookie(name) {\n            return cookies.get(name);\n        },\n        setCookie(name, value, options) {\n            cookies.set(name, value, options);\n        },\n        getRequestHeader(name) {\n            return request.headers.get(name) ?? undefined;\n        },\n        options,\n        cookieOptions\n    });\n    locals[CACHE_KEY] = client;\n    return client;\n}\n", "import { getLoadSupabaseClient } from './supabase-load.js';\nimport { getRequestSupabaseClient } from './supabase-request.js';\nexport async function getSupabase(event) {\n    const requestOrServerLoadEvent = event;\n    const loadEvent = event;\n    let supabaseClient;\n    if (typeof loadEvent.depends === 'function') {\n        // depend on `supabase:auth` to allow reloading all data fetched with rls\n        loadEvent.depends('supabase:auth');\n    }\n    // prefer request/server-load over load\n    if (requestOrServerLoadEvent.locals) {\n        supabaseClient = getRequestSupabaseClient(requestOrServerLoadEvent);\n    }\n    else if (typeof loadEvent.parent === 'function') {\n        supabaseClient = getLoadSupabaseClient(loadEvent);\n    }\n    else {\n        throw new Error('invalid event');\n    }\n    const { data: { session } } = await supabaseClient.auth.getSession();\n    return {\n        supabaseClient,\n        session\n    };\n}\n", "import { getRequestSupabaseClient } from './supabase-request.js';\nexport async function getServerSession(event, expiry_margin = 60) {\n    const supabase = getRequestSupabaseClient(event);\n    let { data: { session } } = await supabase.auth.getSession();\n    if (session?.expires_at &&\n        session.expires_at + expiry_margin <= Date.now() / 1000) {\n        const refreshed = await supabase.auth.refreshSession(session);\n        session = refreshed.data.session;\n    }\n    return session;\n}\n", "export const PKG_NAME = '@supabase/auth-helpers-sveltekit';\nexport const PKG_VERSION = '0.8.7';\n", "import { createBrowserSupabaseClient } from '@supabase/auth-helpers-shared';\nimport { setConfig } from './config.js';\nimport { PKG_NAME, PKG_VERSION } from './constants.js';\nexport function createClient(supabaseUrl, supabaseKey, options, cookieOptions) {\n    const opts = {\n        ...options,\n        global: {\n            ...options?.global,\n            headers: {\n                ...options?.global?.headers,\n                'X-Client-Info': `${PKG_NAME}@${PKG_VERSION}`\n            }\n        }\n    };\n    const globalInstance = createBrowserSupabaseClient({\n        supabaseUrl,\n        supabaseKey,\n        options: opts,\n        cookieOptions\n    });\n    setConfig({\n        globalInstance,\n        supabaseUrl,\n        supabaseKey,\n        options: opts,\n        cookieOptions: {\n            name: 'supabase-auth-token',\n            path: '/',\n            sameSite: 'lax',\n            maxAge: 1000 * 60 * 60 * 24 * 365,\n            ...cookieOptions\n        }\n    });\n    return globalInstance;\n}\n"],
  "mappings": "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",
  "names": ["parse", "serialize", "decode", "import_cookie", "createClient", "options", "createClient"]
}
