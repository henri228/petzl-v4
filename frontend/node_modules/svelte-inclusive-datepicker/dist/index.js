(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.InclusiveDatepicker = {}));
}(this, (function (exports) { 'use strict';

    function noop() { }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function set_store_value(store, ret, value = ret) {
        store.set(value);
        return ret;
    }

    // Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM
    // at the end of hydration without touching the remaining nodes.
    let is_hydrating = false;
    const nodes_to_detach = new Set();
    function start_hydrating() {
        is_hydrating = true;
    }
    function end_hydrating() {
        is_hydrating = false;
        for (const node of nodes_to_detach) {
            node.parentNode.removeChild(node);
        }
        nodes_to_detach.clear();
    }
    function append(target, node) {
        if (is_hydrating) {
            nodes_to_detach.delete(node);
        }
        if (node.parentNode !== target) {
            target.appendChild(node);
        }
    }
    function insert(target, node, anchor) {
        if (is_hydrating) {
            nodes_to_detach.delete(node);
        }
        if (node.parentNode !== target || (anchor && node.nextSibling !== anchor)) {
            target.insertBefore(node, anchor || null);
        }
    }
    function detach(node) {
        if (is_hydrating) {
            nodes_to_detach.add(node);
        }
        else if (node.parentNode) {
            node.parentNode.removeChild(node);
        }
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_data(text, data) {
        data = '' + data;
        if (text.wholeText !== data)
            text.data = data;
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, false, false, detail);
        return e;
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail);
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
            }
        };
    }
    function setContext(key, context) {
        get_current_component().$$.context.set(key, context);
    }
    function getContext(key) {
        return get_current_component().$$.context.get(key);
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function tick() {
        schedule_update();
        return resolved_promise;
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : options.context || []),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false
        };
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                start_hydrating();
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            end_hydrating();
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    /* src/components/DatePickerHeader/DatePickerHeader.svelte generated by Svelte v3.38.1 */

    function add_css$3() {
    	var style = element("style");
    	style.id = "svelte-18t5wxc-style";
    	style.textContent = ".datepicker-header.svelte-18t5wxc.svelte-18t5wxc{display:flex;justify-content:space-between;height:50px;padding:4px 0;box-sizing:border-box}.year-switcher-wrapper.svelte-18t5wxc.svelte-18t5wxc{display:flex;align-items:center;padding-left:12px}.year-switcher-label.svelte-18t5wxc.svelte-18t5wxc{font-size:1rem;margin-right:4px;font-family:var(--sdp-font-family);font-weight:var(--sdp-font-weight)}.month-switcher-wrapper.svelte-18t5wxc.svelte-18t5wxc{display:flex}.month-switcher.svelte-18t5wxc.svelte-18t5wxc{display:flex;align-items:center;justify-content:center;width:42px;height:42px;border:none;padding:0;cursor:pointer;background-color:transparent;border-radius:var(--sdp-border-radius);transition:background-color 200ms ease-in-out}.month-switcher[aria-pressed].svelte-18t5wxc.svelte-18t5wxc:focus{outline:none;box-shadow:0 0 0 0.15rem var(--sdp-bg-focus-color)}.month-switcher[aria-pressed=\"true\"].svelte-18t5wxc span.svelte-18t5wxc{transform:rotate(180deg)}.month-switcher[aria-pressed=\"false\"].svelte-18t5wxc span.svelte-18t5wxc{transform:rotate(0deg)}.month-switcher.svelte-18t5wxc.svelte-18t5wxc:hover{color:var(--sdp-hover-color);background-color:var(--sdp-hover-bg-color)}.month-switcher.svelte-18t5wxc.svelte-18t5wxc:focus{outline:none;box-shadow:inset 0 0 0 0.15rem var(--sdp-bg-focus-color)}.month-switcher.svelte-18t5wxc.svelte-18t5wxc:disabled{opacity:0.35;pointer-events:none}.previous-month.svelte-18t5wxc.svelte-18t5wxc{margin-right:4px}.month-switcher.svelte-18t5wxc.svelte-18t5wxc:active{color:var(--sdp-active-color);background-color:var(--sdp-bg-active-color)}.month-switcher-label.svelte-18t5wxc.svelte-18t5wxc{width:20px;height:20px}";
    	append(document.head, style);
    }

    // (55:2) {#if $view === "days"}
    function create_if_block$1(ctx) {
    	let div;
    	let button0;
    	let span0;
    	let t;
    	let button1;
    	let span1;
    	let mounted;
    	let dispose;

    	return {
    		c() {
    			div = element("div");
    			button0 = element("button");
    			span0 = element("span");
    			span0.innerHTML = `<svg fill="currentColor" focusable="false" viewBox="0 0 24 24" aria-hidden="true" data-testid="ArrowLeftIcon"><path d="M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z"></path></svg>`;
    			t = space();
    			button1 = element("button");
    			span1 = element("span");
    			span1.innerHTML = `<svg fill="currentColor" focusable="false" viewBox="0 0 24 24" aria-hidden="true" data-testid="ArrowRightIcon"><path d="M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"></path></svg>`;
    			attr(span0, "class", "month-switcher-label svelte-18t5wxc");
    			button0.disabled = /*shouldDisableMinDate*/ ctx[5];
    			attr(button0, "class", "month-switcher previous-month svelte-18t5wxc");
    			attr(button0, "aria-label", "previous month");
    			attr(span1, "class", "month-switcher-label svelte-18t5wxc");
    			button1.disabled = /*shouldDisableMaxDate*/ ctx[6];
    			attr(button1, "aria-label", "next month");
    			attr(button1, "class", "month-switcher next-month svelte-18t5wxc");
    			attr(div, "class", "month-switcher-wrapper svelte-18t5wxc");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			append(div, button0);
    			append(button0, span0);
    			append(div, t);
    			append(div, button1);
    			append(button1, span1);

    			if (!mounted) {
    				dispose = [
    					listen(button0, "click", function () {
    						if (is_function(/*selectPreviousMonth*/ ctx[2])) /*selectPreviousMonth*/ ctx[2].apply(this, arguments);
    					}),
    					listen(button1, "click", function () {
    						if (is_function(/*selectNextMonth*/ ctx[3])) /*selectNextMonth*/ ctx[3].apply(this, arguments);
    					})
    				];

    				mounted = true;
    			}
    		},
    		p(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*shouldDisableMinDate*/ 32) {
    				button0.disabled = /*shouldDisableMinDate*/ ctx[5];
    			}

    			if (dirty & /*shouldDisableMaxDate*/ 64) {
    				button1.disabled = /*shouldDisableMaxDate*/ ctx[6];
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			mounted = false;
    			run_all(dispose);
    		}
    	};
    }

    function create_fragment$3(ctx) {
    	let div1;
    	let div0;
    	let time0;
    	let t0_value = /*dateAdapter*/ ctx[0].format(/*currentMonth*/ ctx[1], "month") + "";
    	let t0;
    	let time0_datetime_value;
    	let t1;
    	let time1;
    	let t2_value = /*dateAdapter*/ ctx[0].format(/*currentMonth*/ ctx[1], "year") + "";
    	let t2;
    	let time1_datetime_value;
    	let t3;
    	let button;
    	let span;
    	let button_aria_pressed_value;
    	let t4;
    	let mounted;
    	let dispose;
    	let if_block = /*$view*/ ctx[7] === "days" && create_if_block$1(ctx);

    	return {
    		c() {
    			div1 = element("div");
    			div0 = element("div");
    			time0 = element("time");
    			t0 = text(t0_value);
    			t1 = space();
    			time1 = element("time");
    			t2 = text(t2_value);
    			t3 = space();
    			button = element("button");
    			span = element("span");
    			span.innerHTML = `<svg class="caret" fill="currentColor" focusable="false" viewBox="0 0 24 24" aria-hidden="true"><path d="M7 10l5 5 5-5z"></path></svg>`;
    			t4 = space();
    			if (if_block) if_block.c();
    			attr(time0, "datetime", time0_datetime_value = /*dateAdapter*/ ctx[0].format(/*currentMonth*/ ctx[1], "fullDate"));
    			attr(time0, "data-testid", "selected-month");
    			attr(time0, "aria-live", "polite");
    			attr(time0, "class", "year-switcher-label svelte-18t5wxc");
    			attr(time1, "datetime", time1_datetime_value = /*dateAdapter*/ ctx[0].format(/*currentMonth*/ ctx[1], "fullDate"));
    			attr(time1, "data-testid", "selected-year");
    			attr(time1, "aria-live", "polite");
    			attr(time1, "class", "year-switcher-label svelte-18t5wxc");
    			attr(span, "class", "month-switcher-label svelte-18t5wxc");
    			attr(button, "class", "month-switcher svelte-18t5wxc");
    			attr(button, "type", "button");
    			attr(button, "aria-pressed", button_aria_pressed_value = /*$view*/ ctx[7] === "years");
    			attr(button, "data-testid", "expand-button");
    			attr(div0, "class", "year-switcher-wrapper svelte-18t5wxc");
    			attr(div1, "class", "datepicker-header svelte-18t5wxc");
    		},
    		m(target, anchor) {
    			insert(target, div1, anchor);
    			append(div1, div0);
    			append(div0, time0);
    			append(time0, t0);
    			append(div0, t1);
    			append(div0, time1);
    			append(time1, t2);
    			append(div0, t3);
    			append(div0, button);
    			append(button, span);
    			append(div1, t4);
    			if (if_block) if_block.m(div1, null);

    			if (!mounted) {
    				dispose = listen(button, "click", function () {
    					if (is_function(/*toggleYearPicker*/ ctx[4])) /*toggleYearPicker*/ ctx[4].apply(this, arguments);
    				});

    				mounted = true;
    			}
    		},
    		p(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			if (dirty & /*dateAdapter, currentMonth*/ 3 && t0_value !== (t0_value = /*dateAdapter*/ ctx[0].format(/*currentMonth*/ ctx[1], "month") + "")) set_data(t0, t0_value);

    			if (dirty & /*dateAdapter, currentMonth*/ 3 && time0_datetime_value !== (time0_datetime_value = /*dateAdapter*/ ctx[0].format(/*currentMonth*/ ctx[1], "fullDate"))) {
    				attr(time0, "datetime", time0_datetime_value);
    			}

    			if (dirty & /*dateAdapter, currentMonth*/ 3 && t2_value !== (t2_value = /*dateAdapter*/ ctx[0].format(/*currentMonth*/ ctx[1], "year") + "")) set_data(t2, t2_value);

    			if (dirty & /*dateAdapter, currentMonth*/ 3 && time1_datetime_value !== (time1_datetime_value = /*dateAdapter*/ ctx[0].format(/*currentMonth*/ ctx[1], "fullDate"))) {
    				attr(time1, "datetime", time1_datetime_value);
    			}

    			if (dirty & /*$view*/ 128 && button_aria_pressed_value !== (button_aria_pressed_value = /*$view*/ ctx[7] === "years")) {
    				attr(button, "aria-pressed", button_aria_pressed_value);
    			}

    			if (/*$view*/ ctx[7] === "days") {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$1(ctx);
    					if_block.c();
    					if_block.m(div1, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d(detaching) {
    			if (detaching) detach(div1);
    			if (if_block) if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let shouldDisableMinDate;
    	let shouldDisableMaxDate;
    	let $view;
    	
    	
    	
    	let { dateAdapter } = $$props;
    	let { currentMonth } = $$props;
    	let { minDate } = $$props;
    	let { maxDate } = $$props;
    	let { selectPreviousMonth } = $$props;
    	let { selectNextMonth } = $$props;
    	let { toggleYearPicker } = $$props;
    	const view = getContext("view");
    	component_subscribe($$self, view, value => $$invalidate(7, $view = value));

    	$$self.$$set = $$props => {
    		if ("dateAdapter" in $$props) $$invalidate(0, dateAdapter = $$props.dateAdapter);
    		if ("currentMonth" in $$props) $$invalidate(1, currentMonth = $$props.currentMonth);
    		if ("minDate" in $$props) $$invalidate(9, minDate = $$props.minDate);
    		if ("maxDate" in $$props) $$invalidate(10, maxDate = $$props.maxDate);
    		if ("selectPreviousMonth" in $$props) $$invalidate(2, selectPreviousMonth = $$props.selectPreviousMonth);
    		if ("selectNextMonth" in $$props) $$invalidate(3, selectNextMonth = $$props.selectNextMonth);
    		if ("toggleYearPicker" in $$props) $$invalidate(4, toggleYearPicker = $$props.toggleYearPicker);
    	};

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*dateAdapter, currentMonth, minDate*/ 515) {
    			$$invalidate(5, shouldDisableMinDate = dateAdapter.isSameMonth(currentMonth, minDate));
    		}

    		if ($$self.$$.dirty & /*dateAdapter, currentMonth, maxDate*/ 1027) {
    			$$invalidate(6, shouldDisableMaxDate = dateAdapter.isSameMonth(currentMonth, maxDate));
    		}
    	};

    	return [
    		dateAdapter,
    		currentMonth,
    		selectPreviousMonth,
    		selectNextMonth,
    		toggleYearPicker,
    		shouldDisableMinDate,
    		shouldDisableMaxDate,
    		$view,
    		view,
    		minDate,
    		maxDate
    	];
    }

    class DatePickerHeader extends SvelteComponent {
    	constructor(options) {
    		super();
    		if (!document.getElementById("svelte-18t5wxc-style")) add_css$3();

    		init(this, options, instance$3, create_fragment$3, safe_not_equal, {
    			dateAdapter: 0,
    			currentMonth: 1,
    			minDate: 9,
    			maxDate: 10,
    			selectPreviousMonth: 2,
    			selectNextMonth: 3,
    			toggleYearPicker: 4
    		});
    	}
    }

    /* src/components/DayPicker/DayPicker.svelte generated by Svelte v3.38.1 */

    function add_css$2() {
    	var style = element("style");
    	style.id = "svelte-ie0jw4-style";
    	style.textContent = ".weekdays.svelte-ie0jw4{display:flex;align-items:center;justify-content:center;height:42px}div[role=\"grid\"].svelte-ie0jw4{height:280px}.weekday-label.svelte-ie0jw4{color:var(--sdp-color-grey-400);font-family:var(--sdp-font-family);width:42px;height:42px;margin:0 4px;display:flex;text-align:center;align-items:center;justify-content:center}.week.svelte-ie0jw4{margin:4px 0;display:flex;justify-content:center}.day.svelte-ie0jw4{color:var(--sdp-base-font-color);width:42px;height:42px;padding:0;font-size:0.85rem;font-family:var(--sdp-font-family);font-weight:400;cursor:pointer;line-height:1.66;border-radius:var(--sdp-border-radius);letter-spacing:0.03333em;background-color:var(--sdp-btn-bg-color);transition:background-color 200ms ease-in-out;border:none;margin:0 2px}.day.svelte-ie0jw4:hover{color:var(--sdp-hover-color);background-color:var(--sdp-hover-bg-color)}.day.svelte-ie0jw4:focus{outline:none;color:var(--sdp-focus-color);box-shadow:inset 0 0 0 0.15rem var(--sdp-bg-focus-color)}.day.svelte-ie0jw4:disabled{opacity:0.35;pointer-events:none}.day.svelte-ie0jw4:active{color:var(--sdp-active-color);background-color:var(--sdp-bg-active-color)}.day.selected.svelte-ie0jw4{color:var(--sdp-selected-color);transition:background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;font-weight:500;background-color:var(--sdp-bg-selected-color)}.day.selected.svelte-ie0jw4:focus{outline:none;box-shadow:0 0 0 0.15rem var(--sdp-bg-focus-color), inset 0 0 0 0.1rem var(--sdp-bg-color)}.outside-of-current-month.svelte-ie0jw4{visibility:hidden}.today.svelte-ie0jw4:not(.selected){box-shadow:inset 0 0 0 0.15rem var(--sdp-base-font-color)}.today.svelte-ie0jw4:not(.selected):focus{outline:none;color:var(--sdp-focus-color);box-shadow:inset 0 0 0 0.15rem var(--sdp-bg-focus-color)}";
    	append(document.head, style);
    }

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[15] = list[i];
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[18] = list[i];
    	child_ctx[20] = i;
    	return child_ctx;
    }

    function get_each_context_2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[18] = list[i];
    	return child_ctx;
    }

    // (29:2) {#each dateAdapter.getWeekdays() as day}
    function create_each_block_2(ctx) {
    	let span;
    	let t0_value = /*day*/ ctx[18] + "";
    	let t0;
    	let t1;
    	let span_title_value;

    	return {
    		c() {
    			span = element("span");
    			t0 = text(t0_value);
    			t1 = space();
    			attr(span, "class", "weekday-label svelte-ie0jw4");
    			attr(span, "title", span_title_value = /*day*/ ctx[18]);
    		},
    		m(target, anchor) {
    			insert(target, span, anchor);
    			append(span, t0);
    			append(span, t1);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*dateAdapter*/ 1 && t0_value !== (t0_value = /*day*/ ctx[18] + "")) set_data(t0, t0_value);

    			if (dirty & /*dateAdapter*/ 1 && span_title_value !== (span_title_value = /*day*/ ctx[18])) {
    				attr(span, "title", span_title_value);
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(span);
    		}
    	};
    }

    // (39:6) {#each week as day, i}
    function create_each_block_1(ctx) {
    	let div;
    	let button;
    	let t_value = /*dateAdapter*/ ctx[0].format(/*day*/ ctx[18], "dayOfMonth") + "";
    	let t;
    	let button_aria_hidden_value;
    	let button_aria_label_value;
    	let button_disabled_value;
    	let button_data_testid_value;
    	let button_tabindex_value;
    	let button_autofocus_value;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[12](/*day*/ ctx[18]);
    	}

    	function focus_handler() {
    		return /*focus_handler*/ ctx[13](/*day*/ ctx[18]);
    	}

    	function func(...args) {
    		return /*func*/ ctx[14](/*day*/ ctx[18], ...args);
    	}

    	return {
    		c() {
    			div = element("div");
    			button = element("button");
    			t = text(t_value);
    			attr(button, "aria-hidden", button_aria_hidden_value = /*dateAdapter*/ ctx[0].getMonth(/*day*/ ctx[18]) !== /*currentMonthNumber*/ ctx[3]);
    			attr(button, "aria-label", button_aria_label_value = /*day*/ ctx[18]);
    			attr(button, "type", "button");
    			attr(button, "class", "day svelte-ie0jw4");
    			button.disabled = button_disabled_value = /*handleDisabledDay*/ ctx[8](/*day*/ ctx[18]);

    			attr(button, "data-testid", button_data_testid_value = /*dateAdapter*/ ctx[0].getMonth(/*day*/ ctx[18]) !== /*currentMonthNumber*/ ctx[3]
    			? "hidden-day"
    			: "visible-day");

    			attr(button, "tabindex", button_tabindex_value = /*handleTabIndex*/ ctx[9](/*day*/ ctx[18]));
    			button.autofocus = button_autofocus_value = /*focusedDay*/ ctx[4] !== null && /*dateAdapter*/ ctx[0].isSameDay(/*day*/ ctx[18], /*focusedDay*/ ctx[4]);
    			toggle_class(button, "today", /*dateAdapter*/ ctx[0].isSameDay(/*day*/ ctx[18], /*currentDay*/ ctx[7]));
    			toggle_class(button, "selected", /*selectedDates*/ ctx[2].some(func));
    			toggle_class(button, "outside-of-current-month", /*dateAdapter*/ ctx[0].getMonth(/*day*/ ctx[18]) !== /*currentMonthNumber*/ ctx[3]);
    			attr(div, "role", "cell");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			append(div, button);
    			append(button, t);

    			if (!mounted) {
    				dispose = [
    					listen(button, "click", click_handler),
    					listen(button, "focus", focus_handler)
    				];

    				mounted = true;
    			}
    		},
    		p(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*dateAdapter, fullMonth*/ 3 && t_value !== (t_value = /*dateAdapter*/ ctx[0].format(/*day*/ ctx[18], "dayOfMonth") + "")) set_data(t, t_value);

    			if (dirty & /*dateAdapter, fullMonth, currentMonthNumber*/ 11 && button_aria_hidden_value !== (button_aria_hidden_value = /*dateAdapter*/ ctx[0].getMonth(/*day*/ ctx[18]) !== /*currentMonthNumber*/ ctx[3])) {
    				attr(button, "aria-hidden", button_aria_hidden_value);
    			}

    			if (dirty & /*fullMonth*/ 2 && button_aria_label_value !== (button_aria_label_value = /*day*/ ctx[18])) {
    				attr(button, "aria-label", button_aria_label_value);
    			}

    			if (dirty & /*fullMonth*/ 2 && button_disabled_value !== (button_disabled_value = /*handleDisabledDay*/ ctx[8](/*day*/ ctx[18]))) {
    				button.disabled = button_disabled_value;
    			}

    			if (dirty & /*dateAdapter, fullMonth, currentMonthNumber*/ 11 && button_data_testid_value !== (button_data_testid_value = /*dateAdapter*/ ctx[0].getMonth(/*day*/ ctx[18]) !== /*currentMonthNumber*/ ctx[3]
    			? "hidden-day"
    			: "visible-day")) {
    				attr(button, "data-testid", button_data_testid_value);
    			}

    			if (dirty & /*fullMonth*/ 2 && button_tabindex_value !== (button_tabindex_value = /*handleTabIndex*/ ctx[9](/*day*/ ctx[18]))) {
    				attr(button, "tabindex", button_tabindex_value);
    			}

    			if (dirty & /*focusedDay, dateAdapter, fullMonth*/ 19 && button_autofocus_value !== (button_autofocus_value = /*focusedDay*/ ctx[4] !== null && /*dateAdapter*/ ctx[0].isSameDay(/*day*/ ctx[18], /*focusedDay*/ ctx[4]))) {
    				button.autofocus = button_autofocus_value;
    			}

    			if (dirty & /*dateAdapter, fullMonth, currentDay*/ 131) {
    				toggle_class(button, "today", /*dateAdapter*/ ctx[0].isSameDay(/*day*/ ctx[18], /*currentDay*/ ctx[7]));
    			}

    			if (dirty & /*selectedDates, dateAdapter, fullMonth*/ 7) {
    				toggle_class(button, "selected", /*selectedDates*/ ctx[2].some(func));
    			}

    			if (dirty & /*dateAdapter, fullMonth, currentMonthNumber*/ 11) {
    				toggle_class(button, "outside-of-current-month", /*dateAdapter*/ ctx[0].getMonth(/*day*/ ctx[18]) !== /*currentMonthNumber*/ ctx[3]);
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			mounted = false;
    			run_all(dispose);
    		}
    	};
    }

    // (37:2) {#each fullMonth as week}
    function create_each_block$1(ctx) {
    	let div;
    	let t;
    	let each_value_1 = /*week*/ ctx[15];
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	return {
    		c() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t = space();
    			attr(div, "class", "week svelte-ie0jw4");
    			attr(div, "role", "row");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			append(div, t);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*dateAdapter, fullMonth, currentMonthNumber, handleDisabledDay, handleTabIndex, focusedDay, currentDay, selectedDates, onDaySelect, handleFocus*/ 1023) {
    				each_value_1 = /*week*/ ctx[15];
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, t);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};
    }

    function create_fragment$2(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let each_value_2 = /*dateAdapter*/ ctx[0].getWeekdays();
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks_1[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
    	}

    	let each_value = /*fullMonth*/ ctx[1];
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	return {
    		c() {
    			div0 = element("div");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t = space();
    			div1 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr(div0, "class", "weekdays svelte-ie0jw4");
    			attr(div1, "role", "grid");
    			attr(div1, "class", "svelte-ie0jw4");
    		},
    		m(target, anchor) {
    			insert(target, div0, anchor);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(div0, null);
    			}

    			insert(target, t, anchor);
    			insert(target, div1, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div1, null);
    			}
    		},
    		p(ctx, [dirty]) {
    			if (dirty & /*dateAdapter*/ 1) {
    				each_value_2 = /*dateAdapter*/ ctx[0].getWeekdays();
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2(ctx, each_value_2, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_2(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(div0, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_2.length;
    			}

    			if (dirty & /*fullMonth, dateAdapter, currentMonthNumber, handleDisabledDay, handleTabIndex, focusedDay, currentDay, selectedDates, onDaySelect, handleFocus*/ 1023) {
    				each_value = /*fullMonth*/ ctx[1];
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div1, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop,
    		o: noop,
    		d(detaching) {
    			if (detaching) detach(div0);
    			destroy_each(each_blocks_1, detaching);
    			if (detaching) detach(t);
    			if (detaching) detach(div1);
    			destroy_each(each_blocks, detaching);
    		}
    	};
    }

    function instance$2($$self, $$props, $$invalidate) {
    	
    	let { dateAdapter } = $$props;
    	let { fullMonth } = $$props;
    	let { selectedDates } = $$props;
    	let { currentMonthNumber } = $$props;
    	let { focusedDay } = $$props;
    	let { minDate } = $$props;
    	let { maxDate } = $$props;
    	let { onDaySelect } = $$props;
    	let { handleFocus } = $$props;
    	let currentDay = dateAdapter.date();

    	function handleDisabledDay(day) {
    		const isDayDisabled = !dateAdapter.isWithinRange(day, [minDate, maxDate]) && !dateAdapter.isSameDay(day, minDate) && !dateAdapter.isSameDay(day, maxDate);
    		return isDayDisabled;
    	}

    	function handleTabIndex(day) {
    		const isSelected = selectedDates.some(selectedDate => selectedDate && dateAdapter.isSameDay(selectedDate, day));
    		const isFocused = dateAdapter.isSameDay(day, focusedDay);

    		if (isSelected || isFocused) {
    			return 0;
    		}

    		return -1;
    	}

    	const click_handler = day => {
    		onDaySelect(day);
    	};

    	const focus_handler = day => handleFocus(day);
    	const func = (day, selectedDate) => selectedDate && dateAdapter.isSameDay(selectedDate, day);

    	$$self.$$set = $$props => {
    		if ("dateAdapter" in $$props) $$invalidate(0, dateAdapter = $$props.dateAdapter);
    		if ("fullMonth" in $$props) $$invalidate(1, fullMonth = $$props.fullMonth);
    		if ("selectedDates" in $$props) $$invalidate(2, selectedDates = $$props.selectedDates);
    		if ("currentMonthNumber" in $$props) $$invalidate(3, currentMonthNumber = $$props.currentMonthNumber);
    		if ("focusedDay" in $$props) $$invalidate(4, focusedDay = $$props.focusedDay);
    		if ("minDate" in $$props) $$invalidate(10, minDate = $$props.minDate);
    		if ("maxDate" in $$props) $$invalidate(11, maxDate = $$props.maxDate);
    		if ("onDaySelect" in $$props) $$invalidate(5, onDaySelect = $$props.onDaySelect);
    		if ("handleFocus" in $$props) $$invalidate(6, handleFocus = $$props.handleFocus);
    	};

    	return [
    		dateAdapter,
    		fullMonth,
    		selectedDates,
    		currentMonthNumber,
    		focusedDay,
    		onDaySelect,
    		handleFocus,
    		currentDay,
    		handleDisabledDay,
    		handleTabIndex,
    		minDate,
    		maxDate,
    		click_handler,
    		focus_handler,
    		func
    	];
    }

    class DayPicker extends SvelteComponent {
    	constructor(options) {
    		super();
    		if (!document.getElementById("svelte-ie0jw4-style")) add_css$2();

    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
    			dateAdapter: 0,
    			fullMonth: 1,
    			selectedDates: 2,
    			currentMonthNumber: 3,
    			focusedDay: 4,
    			minDate: 10,
    			maxDate: 11,
    			onDaySelect: 5,
    			handleFocus: 6
    		});
    	}
    }

    function handleFocusTrap(event, { element, classNames, isFocusTrapDisabled }) {
        if (!element || isFocusTrapDisabled) {
            return;
        }
        const focusableElements = element.querySelectorAll(classNames);
        const firstFocusableElement = focusableElements[0];
        const lastFocusableElement = focusableElements[focusableElements.length - 1];
        const isTabPressed = event.key === "Tab";
        if (!isTabPressed) {
            return;
        }
        /*
          the focusElements.length !== -1 check is needed to ensure that the
          focusable elements array contains all elements. The reason for
          this behavior is DOM manipulation due to the year picker.
        */
        if (!event.shiftKey &&
            document.activeElement === lastFocusableElement &&
            focusableElements.length !== 1) {
            firstFocusableElement.focus();
            event.preventDefault();
        }
        if (event.shiftKey &&
            document.activeElement === firstFocusableElement &&
            focusableElements.length !== 1) {
            lastFocusableElement.focus();
            event.preventDefault();
        }
    }

    /* src/components/YearPicker/YearPicker.svelte generated by Svelte v3.38.1 */

    const { document: document_1$1 } = globals;

    function add_css$1() {
    	var style = element("style");
    	style.id = "svelte-10ieq7e-style";
    	style.textContent = ".year-picker.svelte-10ieq7e{height:322px;padding:0 4px;box-sizing:border-box;display:flex;flex-wrap:wrap;overflow-y:auto;flex-direction:row}.year-button.svelte-10ieq7e{flex-basis:calc(25% - 4px);color:unset;width:72px;border:none;cursor:pointer;height:42px;margin:8px 0;outline:0;font-size:1rem;font-family:var(--sdp-font-family);font-weight:var(--sdp-font-weight);line-height:1.75;border-radius:16px;letter-spacing:0.00938em;background-color:transparent;border-radius:var(--sdp-border-radius);transition:background-color 200ms ease-in-out;margin-right:5px}.year-button.svelte-10ieq7e:nth-child(4n){margin-right:0}.year-button.svelte-10ieq7e:hover{color:var(--sdp-hover-color);background-color:var(--sdp-hover-bg-color)}.year-button.svelte-10ieq7e:focus{outline:none;box-shadow:inset 0 0 0 0.15rem var(--sdp-bg-focus-color)}.year-button.svelte-10ieq7e:active{color:var(--sdp-active-color);background-color:var(--sdp-bg-active-color)}.year-button.selected.svelte-10ieq7e{color:var(--sdp-selected-color);background-color:var(--sdp-bg-selected-color)}.year-button.selected.svelte-10ieq7e:focus{outline:none;box-shadow:0 0 0 0.15rem var(--sdp-bg-focus-color), inset 0 0 0 0.1rem var(--sdp-bg-color)}";
    	append(document_1$1.head, style);
    }

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[18] = list[i];
    	return child_ctx;
    }

    // (96:2) {#each dateAdapter.getYearRange(minDate, maxDate) as year}
    function create_each_block(ctx) {
    	let button;
    	let t0_value = /*dateAdapter*/ ctx[0].format(/*year*/ ctx[18], "year") + "";
    	let t0;
    	let t1;
    	let button_tabindex_value;
    	let button_aria_pressed_value;
    	let button_arial_label_value;
    	let mounted;
    	let dispose;

    	function focus_handler() {
    		return /*focus_handler*/ ctx[11](/*year*/ ctx[18]);
    	}

    	function click_handler() {
    		return /*click_handler*/ ctx[12](/*year*/ ctx[18]);
    	}

    	return {
    		c() {
    			button = element("button");
    			t0 = text(t0_value);
    			t1 = space();
    			attr(button, "class", "year-button svelte-10ieq7e");
    			attr(button, "type", "button");

    			attr(button, "tabindex", button_tabindex_value = /*handleSelectClass*/ ctx[9](/*currentMonth*/ ctx[3], /*year*/ ctx[18])
    			? 0
    			: -1);

    			attr(button, "aria-pressed", button_aria_pressed_value = /*handleSelectClass*/ ctx[9](/*currentMonth*/ ctx[3], /*year*/ ctx[18]));
    			attr(button, "arial-label", button_arial_label_value = /*year*/ ctx[18]);
    			toggle_class(button, "selected", /*handleSelectClass*/ ctx[9](/*currentMonth*/ ctx[3], /*year*/ ctx[18]));
    		},
    		m(target, anchor) {
    			insert(target, button, anchor);
    			append(button, t0);
    			append(button, t1);

    			if (!mounted) {
    				dispose = [
    					listen(button, "focus", focus_handler),
    					listen(button, "click", click_handler)
    				];

    				mounted = true;
    			}
    		},
    		p(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*dateAdapter, minDate, maxDate*/ 7 && t0_value !== (t0_value = /*dateAdapter*/ ctx[0].format(/*year*/ ctx[18], "year") + "")) set_data(t0, t0_value);

    			if (dirty & /*currentMonth, dateAdapter, minDate, maxDate*/ 15 && button_tabindex_value !== (button_tabindex_value = /*handleSelectClass*/ ctx[9](/*currentMonth*/ ctx[3], /*year*/ ctx[18])
    			? 0
    			: -1)) {
    				attr(button, "tabindex", button_tabindex_value);
    			}

    			if (dirty & /*currentMonth, dateAdapter, minDate, maxDate*/ 15 && button_aria_pressed_value !== (button_aria_pressed_value = /*handleSelectClass*/ ctx[9](/*currentMonth*/ ctx[3], /*year*/ ctx[18]))) {
    				attr(button, "aria-pressed", button_aria_pressed_value);
    			}

    			if (dirty & /*dateAdapter, minDate, maxDate*/ 7 && button_arial_label_value !== (button_arial_label_value = /*year*/ ctx[18])) {
    				attr(button, "arial-label", button_arial_label_value);
    			}

    			if (dirty & /*handleSelectClass, currentMonth, dateAdapter, minDate, maxDate*/ 527) {
    				toggle_class(button, "selected", /*handleSelectClass*/ ctx[9](/*currentMonth*/ ctx[3], /*year*/ ctx[18]));
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(button);
    			mounted = false;
    			run_all(dispose);
    		}
    	};
    }

    function create_fragment$1(ctx) {
    	let div;
    	let mounted;
    	let dispose;
    	let each_value = /*dateAdapter*/ ctx[0].getYearRange(/*minDate*/ ctx[1], /*maxDate*/ ctx[2]);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	return {
    		c() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr(div, "class", "year-picker svelte-10ieq7e");
    			attr(div, "tabindex", "-1");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			/*div_binding*/ ctx[13](div);

    			if (!mounted) {
    				dispose = listen(div, "keydown", /*handleKeyDown*/ ctx[8]);
    				mounted = true;
    			}
    		},
    		p(ctx, [dirty]) {
    			if (dirty & /*handleSelectClass, currentMonth, dateAdapter, minDate, maxDate, handleYearFocus, selectYear*/ 671) {
    				each_value = /*dateAdapter*/ ctx[0].getYearRange(/*minDate*/ ctx[1], /*maxDate*/ ctx[2]);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop,
    		o: noop,
    		d(detaching) {
    			if (detaching) detach(div);
    			destroy_each(each_blocks, detaching);
    			/*div_binding*/ ctx[13](null);
    			mounted = false;
    			dispose();
    		}
    	};
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let $view;

    	var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
    		function adopt(value) {
    			return value instanceof P
    			? value
    			: new P(function (resolve) {
    						resolve(value);
    					});
    		}

    		return new (P || (P = Promise))(function (resolve, reject) {
    				function fulfilled(value) {
    					try {
    						step(generator.next(value));
    					} catch(e) {
    						reject(e);
    					}
    				}

    				function rejected(value) {
    					try {
    						step(generator["throw"](value));
    					} catch(e) {
    						reject(e);
    					}
    				}

    				function step(result) {
    					result.done
    					? resolve(result.value)
    					: adopt(result.value).then(fulfilled, rejected);
    				}

    				step((generator = generator.apply(thisArg, _arguments || [])).next());
    			});
    	};

    	
    	
    	
    	let { dateAdapter } = $$props;
    	let { minDate } = $$props;
    	let { maxDate } = $$props;
    	let { currentMonth } = $$props;
    	let { datepicker = null } = $$props;
    	let { selectYear } = $$props;
    	const view = getContext("view");
    	component_subscribe($$self, view, value => $$invalidate(15, $view = value));
    	let years;

    	function handleYearFocus(year) {
    	}

    	function handleKeyDownFocus(index, focusedElement) {
    		focusedElement.blur();
    		[...years.childNodes][index].focus();
    	}

    	function handleKeyDown(event) {
    		return __awaiter(this, void 0, void 0, function* () {
    			const current = document.activeElement;
    			const yearItems = [...years.childNodes];
    			const currentIndex = yearItems.indexOf(current);
    			dateAdapter.getYear(currentMonth);
    			let newIndex;

    			if (!current || $view === "days") {
    				return;
    			}

    			yield tick();

    			handleFocusTrap(event, {
    				element: datepicker,
    				classNames: `.month-switcher:not([disabled]), .year-button:not([tabindex='-1']`,
    				isFocusTrapDisabled: false
    			});

    			switch (event.key) {
    				case "ArrowUp":
    					newIndex = (currentIndex + yearItems.length - 4) % yearItems.length;
    					handleKeyDownFocus(newIndex, current);
    					event.preventDefault();
    					break;
    				case "ArrowDown":
    					newIndex = (currentIndex + yearItems.length + 4) % yearItems.length;
    					handleKeyDownFocus(newIndex, current);
    					event.preventDefault();
    					break;
    				case "ArrowLeft":
    					newIndex = (currentIndex + yearItems.length - 1) % yearItems.length;
    					handleKeyDownFocus(newIndex, current);
    					event.preventDefault();
    					break;
    				case "ArrowRight":
    					newIndex = (currentIndex + yearItems.length + 1) % yearItems.length;
    					handleKeyDownFocus(newIndex, current);
    					event.preventDefault();
    					break;
    			}
    		});
    	}

    	function handleSelectClass(currentMonth, date) {
    		const currentMonthYear = dateAdapter.getYear(currentMonth);
    		const year = dateAdapter.getYear(date);
    		return currentMonthYear === year;
    	}

    	onMount(() => {
    		const selectedYear = [...years.childNodes].filter(year => year.classList.contains("selected"));

    		if (selectedYear[0]) {
    			selectedYear[0].focus();
    		}
    	});

    	const focus_handler = year => handleYearFocus(dateAdapter.getYear(year));
    	const click_handler = year => selectYear(year);

    	function div_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			years = $$value;
    			$$invalidate(5, years);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ("dateAdapter" in $$props) $$invalidate(0, dateAdapter = $$props.dateAdapter);
    		if ("minDate" in $$props) $$invalidate(1, minDate = $$props.minDate);
    		if ("maxDate" in $$props) $$invalidate(2, maxDate = $$props.maxDate);
    		if ("currentMonth" in $$props) $$invalidate(3, currentMonth = $$props.currentMonth);
    		if ("datepicker" in $$props) $$invalidate(10, datepicker = $$props.datepicker);
    		if ("selectYear" in $$props) $$invalidate(4, selectYear = $$props.selectYear);
    	};

    	return [
    		dateAdapter,
    		minDate,
    		maxDate,
    		currentMonth,
    		selectYear,
    		years,
    		view,
    		handleYearFocus,
    		handleKeyDown,
    		handleSelectClass,
    		datepicker,
    		focus_handler,
    		click_handler,
    		div_binding
    	];
    }

    class YearPicker extends SvelteComponent {
    	constructor(options) {
    		super();
    		if (!document_1$1.getElementById("svelte-10ieq7e-style")) add_css$1();

    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
    			dateAdapter: 0,
    			minDate: 1,
    			maxDate: 2,
    			currentMonth: 3,
    			datepicker: 10,
    			selectYear: 4
    		});
    	}
    }

    const defaultMinDate = new Date("1900-01-01");
    const defaultMaxDate = new Date("2099-12-31");

    const subscriber_queue = [];
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = [];
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (let i = 0; i < subscribers.length; i += 1) {
                        const s = subscribers[i];
                        s[1]();
                        subscriber_queue.push(s, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.push(subscriber);
            if (subscribers.length === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                const index = subscribers.indexOf(subscriber);
                if (index !== -1) {
                    subscribers.splice(index, 1);
                }
                if (subscribers.length === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }

    /* src/components/DatePicker.svelte generated by Svelte v3.38.1 */

    const { document: document_1 } = globals;

    function add_css() {
    	var style = element("style");
    	style.id = "svelte-1gjmd48-style";
    	style.textContent = ":root{--sdp-border-radius:4px;--sdp-font-family:\"Roboto\", sans-serif;--sdp-font-weight:400;--sdp-base-font-color:rgba(0, 0, 0, 0.87);--sdp-accent-color:rgb(255, 62, 0);--sdp-hover-bg-color:rgba(238, 238, 238, 0.625);--sdp-hover-color:rgba(0, 0, 0, 0.87);--sdp-bg-focus-color:var(--sdp-accent-color);--sdp-focus-color:rgba(0, 0, 0, 0.87);--sdp-bg-active-color:var(--sdp-accent-color);--sdp-active-color:rgb(255, 255, 255);--sdp-bg-selected-color:var(--sdp-accent-color);--sdp-selected-color:rgb(255, 255, 255);--sdp-bg-color:rgb(255, 255, 255);--sdp-btn-bg-color:rgb(255, 255, 255);--sdp-color-grey-500:rgb(80, 80, 80);--sdp-color-grey-400:rgb(133, 133, 133);--sdp-color-grey-300:rgb(216, 216, 216)}.date-picker.svelte-1gjmd48{width:322px;margin:0 auto;display:flex;max-height:380px;overflow-x:hidden;flex-direction:column;background-color:var(--sdp-bg-color)}";
    	append(document_1.head, style);
    }

    // (251:2) {#if $view === "years"}
    function create_if_block_1(ctx) {
    	let yearpicker;
    	let current;

    	yearpicker = new YearPicker({
    			props: {
    				minDate: /*minDate*/ ctx[2],
    				maxDate: /*maxDate*/ ctx[3],
    				dateAdapter: /*dateAdapter*/ ctx[0],
    				currentMonth: /*currentMonth*/ ctx[4],
    				selectYear: /*selectYear*/ ctx[16],
    				datepicker: /*datepicker*/ ctx[5]
    			}
    		});

    	return {
    		c() {
    			create_component(yearpicker.$$.fragment);
    		},
    		m(target, anchor) {
    			mount_component(yearpicker, target, anchor);
    			current = true;
    		},
    		p(ctx, dirty) {
    			const yearpicker_changes = {};
    			if (dirty & /*minDate*/ 4) yearpicker_changes.minDate = /*minDate*/ ctx[2];
    			if (dirty & /*maxDate*/ 8) yearpicker_changes.maxDate = /*maxDate*/ ctx[3];
    			if (dirty & /*dateAdapter*/ 1) yearpicker_changes.dateAdapter = /*dateAdapter*/ ctx[0];
    			if (dirty & /*currentMonth*/ 16) yearpicker_changes.currentMonth = /*currentMonth*/ ctx[4];
    			if (dirty & /*datepicker*/ 32) yearpicker_changes.datepicker = /*datepicker*/ ctx[5];
    			yearpicker.$set(yearpicker_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(yearpicker.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(yearpicker.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(yearpicker, detaching);
    		}
    	};
    }

    // (262:2) {#if $view === "days"}
    function create_if_block(ctx) {
    	let daypicker;
    	let current;

    	daypicker = new DayPicker({
    			props: {
    				minDate: /*minDate*/ ctx[2],
    				maxDate: /*maxDate*/ ctx[3],
    				dateAdapter: /*dateAdapter*/ ctx[0],
    				fullMonth: /*fullMonth*/ ctx[8],
    				selectedDates: /*selectedDates*/ ctx[6],
    				currentMonthNumber: /*currentMonthNumber*/ ctx[7],
    				focusedDay: /*focusedDay*/ ctx[1],
    				onDaySelect: /*onDaySelect*/ ctx[11],
    				handleFocus: /*handleFocus*/ ctx[12]
    			}
    		});

    	return {
    		c() {
    			create_component(daypicker.$$.fragment);
    		},
    		m(target, anchor) {
    			mount_component(daypicker, target, anchor);
    			current = true;
    		},
    		p(ctx, dirty) {
    			const daypicker_changes = {};
    			if (dirty & /*minDate*/ 4) daypicker_changes.minDate = /*minDate*/ ctx[2];
    			if (dirty & /*maxDate*/ 8) daypicker_changes.maxDate = /*maxDate*/ ctx[3];
    			if (dirty & /*dateAdapter*/ 1) daypicker_changes.dateAdapter = /*dateAdapter*/ ctx[0];
    			if (dirty & /*fullMonth*/ 256) daypicker_changes.fullMonth = /*fullMonth*/ ctx[8];
    			if (dirty & /*selectedDates*/ 64) daypicker_changes.selectedDates = /*selectedDates*/ ctx[6];
    			if (dirty & /*currentMonthNumber*/ 128) daypicker_changes.currentMonthNumber = /*currentMonthNumber*/ ctx[7];
    			if (dirty & /*focusedDay*/ 2) daypicker_changes.focusedDay = /*focusedDay*/ ctx[1];
    			daypicker.$set(daypicker_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(daypicker.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(daypicker.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(daypicker, detaching);
    		}
    	};
    }

    function create_fragment(ctx) {
    	let div;
    	let datepickerheader;
    	let t0;
    	let t1;
    	let current;
    	let mounted;
    	let dispose;

    	datepickerheader = new DatePickerHeader({
    			props: {
    				dateAdapter: /*dateAdapter*/ ctx[0],
    				currentMonth: /*currentMonth*/ ctx[4],
    				minDate: /*minDate*/ ctx[2],
    				maxDate: /*maxDate*/ ctx[3],
    				selectNextMonth: /*selectNextMonth*/ ctx[14],
    				selectPreviousMonth: /*selectPreviousMonth*/ ctx[15],
    				toggleYearPicker: /*toggleYearPicker*/ ctx[17]
    			}
    		});

    	let if_block0 = /*$view*/ ctx[9] === "years" && create_if_block_1(ctx);
    	let if_block1 = /*$view*/ ctx[9] === "days" && create_if_block(ctx);

    	return {
    		c() {
    			div = element("div");
    			create_component(datepickerheader.$$.fragment);
    			t0 = space();
    			if (if_block0) if_block0.c();
    			t1 = space();
    			if (if_block1) if_block1.c();
    			attr(div, "class", "date-picker svelte-1gjmd48");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			mount_component(datepickerheader, div, null);
    			append(div, t0);
    			if (if_block0) if_block0.m(div, null);
    			append(div, t1);
    			if (if_block1) if_block1.m(div, null);
    			/*div_binding*/ ctx[21](div);
    			current = true;

    			if (!mounted) {
    				dispose = listen(div, "keydown", /*handleKeyDown*/ ctx[13]);
    				mounted = true;
    			}
    		},
    		p(ctx, [dirty]) {
    			const datepickerheader_changes = {};
    			if (dirty & /*dateAdapter*/ 1) datepickerheader_changes.dateAdapter = /*dateAdapter*/ ctx[0];
    			if (dirty & /*currentMonth*/ 16) datepickerheader_changes.currentMonth = /*currentMonth*/ ctx[4];
    			if (dirty & /*minDate*/ 4) datepickerheader_changes.minDate = /*minDate*/ ctx[2];
    			if (dirty & /*maxDate*/ 8) datepickerheader_changes.maxDate = /*maxDate*/ ctx[3];
    			datepickerheader.$set(datepickerheader_changes);

    			if (/*$view*/ ctx[9] === "years") {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty & /*$view*/ 512) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_1(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div, t1);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (/*$view*/ ctx[9] === "days") {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*$view*/ 512) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div, null);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(datepickerheader.$$.fragment, local);
    			transition_in(if_block0);
    			transition_in(if_block1);
    			current = true;
    		},
    		o(local) {
    			transition_out(datepickerheader.$$.fragment, local);
    			transition_out(if_block0);
    			transition_out(if_block1);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			destroy_component(datepickerheader);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			/*div_binding*/ ctx[21](null);
    			mounted = false;
    			dispose();
    		}
    	};
    }

    function instance($$self, $$props, $$invalidate) {
    	let selectedDates;
    	let currentMonth;
    	let currentMonthNumber;
    	let needMonthSwitch;
    	let fullMonth;
    	let $view;

    	var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
    		function adopt(value) {
    			return value instanceof P
    			? value
    			: new P(function (resolve) {
    						resolve(value);
    					});
    		}

    		return new (P || (P = Promise))(function (resolve, reject) {
    				function fulfilled(value) {
    					try {
    						step(generator.next(value));
    					} catch(e) {
    						reject(e);
    					}
    				}

    				function rejected(value) {
    					try {
    						step(generator["throw"](value));
    					} catch(e) {
    						reject(e);
    					}
    				}

    				function step(result) {
    					result.done
    					? resolve(result.value)
    					: adopt(result.value).then(fulfilled, rejected);
    				}

    				step((generator = generator.apply(thisArg, _arguments || [])).next());
    			});
    	};

    	
    	
    	let { dateAdapter } = $$props;
    	let { locale } = $$props;
    	let { value = dateAdapter.date() } = $$props;
    	let { focusedDay = dateAdapter.date() } = $$props;
    	let { minDate = defaultMinDate } = $$props;
    	let { maxDate = defaultMaxDate } = $$props;
    	let { isFocusTrapDisabled = false } = $$props;
    	const dispatch = createEventDispatcher();
    	const view = writable("days");
    	component_subscribe($$self, view, value => $$invalidate(9, $view = value));
    	setContext("view", view);
    	let datepicker;

    	if (locale) {
    		dateAdapter.locale = locale;
    	}

    	function onDaySelect(day) {
    		dispatch("selectDay", day);
    	}

    	function changeFocusedDay(newFocusDay) {
    		if (focusedDay !== null && dateAdapter.isSameDay(newFocusDay, focusedDay)) {
    			return;
    		}

    		$$invalidate(1, focusedDay = newFocusDay);
    		needMonthSwitch = Boolean(focusedDay) && !dateAdapter.isSameMonth(currentMonth, focusedDay);

    		$$invalidate(4, currentMonth = needMonthSwitch
    		? dateAdapter.startOfMonth(focusedDay)
    		: currentMonth);
    	}

    	const handleFocus = focusedDay => {
    		changeFocusedDay(focusedDay);
    	};

    	// TODO: Clean up this function and make it more DRY
    	function handleKeyDown(event) {
    		return __awaiter(this, void 0, void 0, function* () {
    			const current = document.activeElement;

    			/*
      it's necessary to transform the minDate and maxDate
      to ensure that it's compatible with all date adapters
    */
    			const formattedMinDate = dateAdapter.date(minDate);

    			const formattedmaxDate = dateAdapter.date(maxDate);
    			yield tick();
    			let items = [...datepicker.querySelectorAll(".day[aria-hidden=\"false\"]")];
    			const currentIndex = current ? items.indexOf(current) : 0;

    			/*
      If we we don't find a current on document or the
      year picker is open we don't handle event
      delagation for the day picker.
    */
    			if (!current || $view === "years") {
    				return;
    			}

    			yield tick();

    			handleFocusTrap(event, {
    				element: datepicker,
    				classNames: `.month-switcher:not([disabled]), .day:not([tabindex='-1']`,
    				isFocusTrapDisabled
    			});

    			let newIndex;

    			switch (event.key) {
    				case "ArrowUp":
    					const previousWeek = dateAdapter.addDays(focusedDay, -7);
    					const isWeekOutOfMinDateRange = formattedMinDate && dateAdapter.isSameMonth(previousWeek, dateAdapter.getPreviousMonth(formattedMinDate));
    					// TODO This is a bad naming and has to be changed
    					const isDayOutOfMinDateRange = !dateAdapter.isWithinRange(dateAdapter.startOfDay(previousWeek), [
    						dateAdapter.startOfDay(formattedMinDate),
    						dateAdapter.startOfDay(formattedmaxDate)
    					]);
    					if (isWeekOutOfMinDateRange || isDayOutOfMinDateRange) {
    						return;
    					}
    					// This could perform a month switch
    					changeFocusedDay(dateAdapter.addDays(focusedDay, -7));
    					if (needMonthSwitch) {
    						/*
      If you switch to the previous month the focus
      should be applied to the last day
    */
    						yield tick();

    						items = [...datepicker.querySelectorAll(".day[aria-hidden=\"false\"]")];
    						newIndex = items.length - 1;
    					} else {
    						newIndex = (currentIndex + items.length - 7) % items.length;
    					}
    					handeKeyDownFocus(newIndex, current);
    					event.preventDefault();
    					break;
    				case "ArrowDown":
    					const nextWeek = dateAdapter.addDays(focusedDay, 7);
    					const isWeekOutOfMaxDateRange = dateAdapter.isSameMonth(nextWeek, dateAdapter.getNextMonth(formattedmaxDate));
    					const isDayOutOfMaxDateRange = !dateAdapter.isWithinRange(dateAdapter.startOfDay(nextWeek), [
    						dateAdapter.startOfDay(formattedMinDate),
    						dateAdapter.startOfDay(formattedmaxDate)
    					]);
    					if (isWeekOutOfMaxDateRange || isDayOutOfMaxDateRange) {
    						return;
    					}
    					// This could perform a month switch
    					changeFocusedDay(dateAdapter.addDays(focusedDay, 7));
    					if (needMonthSwitch) {
    						newIndex = 0;
    					} else {
    						newIndex = (currentIndex + items.length + 7) % items.length;
    					}
    					// This could perform a month switch
    					handeKeyDownFocus(newIndex, current);
    					event.preventDefault();
    					break;
    				case "ArrowLeft":
    					// TODO this early return needs to be in sync with minDate and the disbaled button in the daypicker
    					if (dateAdapter.isSameDay(focusedDay, formattedMinDate)) {
    						return;
    					}
    					// This could perform a month switch
    					changeFocusedDay(dateAdapter.addDays(focusedDay, -1));
    					if (needMonthSwitch) {
    						/*
      If you switch to the previous month the focus
      should be applied to the last day
    */
    						yield tick();

    						items = [...datepicker.querySelectorAll(".day[aria-hidden=\"false\"]")];
    						newIndex = items.length - 1;
    					} else {
    						newIndex = (currentIndex + items.length - 1) % items.length;
    					}
    					// This could perform a month switch
    					handeKeyDownFocus(newIndex, current);
    					event.preventDefault();
    					break;
    				case "ArrowRight":
    					if (dateAdapter.isSameDay(focusedDay, formattedmaxDate)) {
    						return;
    					}
    					// This could perform a month switch
    					changeFocusedDay(dateAdapter.addDays(focusedDay, 1));
    					if (needMonthSwitch) {
    						newIndex = 0;
    					} else {
    						newIndex = (currentIndex + items.length + 1) % items.length;
    					}
    					handeKeyDownFocus(newIndex, current);
    					event.preventDefault();
    					break;
    				case "Tab":
    					newIndex = currentIndex;
    				case "Enter":
    					newIndex = currentIndex;
    			}
    		});
    	}

    	function handeKeyDownFocus(index, activeElement) {
    		return __awaiter(this, void 0, void 0, function* () {
    			let newItems;
    			activeElement.blur();

    			if (needMonthSwitch) {
    				// because of DOM manipulation we have to use tick
    				yield tick();

    				newItems = [...datepicker.querySelectorAll(".day[aria-hidden=\"false\"]")];
    				newItems[0].focus();
    			}

    			if (!needMonthSwitch) {
    				// because of DOM manipulation we have to use tick
    				yield tick();

    				newItems = [...datepicker.querySelectorAll(".day[aria-hidden=\"false\"]")];
    				newItems[index].focus();
    			}
    		});
    	}

    	function selectNextMonth() {
    		$$invalidate(4, currentMonth = dateAdapter.getNextMonth(currentMonth));
    		$$invalidate(1, focusedDay = currentMonth);
    		onDaySelect(currentMonth);
    	}

    	function selectPreviousMonth() {
    		$$invalidate(4, currentMonth = dateAdapter.getPreviousMonth(currentMonth));
    		$$invalidate(1, focusedDay = currentMonth);
    		onDaySelect(currentMonth);
    	}

    	function selectYear(year) {
    		return __awaiter(this, void 0, void 0, function* () {
    			const yearNumber = dateAdapter.getYear(year);

    			/*
      update focusedDay to prevent month switch
      back to previous selection with keyboard controls
    */
    			$$invalidate(1, focusedDay = value);

    			$$invalidate(18, value = dateAdapter.setYear(focusedDay, yearNumber));
    			onDaySelect(value);
    			set_store_value(view, $view = "days", $view);
    			yield tick();
    			const selectedDay = datepicker.querySelector(".selected");

    			if (selectedDay) {
    				selectedDay.focus();
    			}
    		});
    	}

    	function toggleYearPicker() {
    		if ($view === "days") {
    			set_store_value(view, $view = "years", $view);
    		} else if ($view === "years") {
    			set_store_value(view, $view = "days", $view);
    		}
    	}

    	function div_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			datepicker = $$value;
    			$$invalidate(5, datepicker);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ("dateAdapter" in $$props) $$invalidate(0, dateAdapter = $$props.dateAdapter);
    		if ("locale" in $$props) $$invalidate(19, locale = $$props.locale);
    		if ("value" in $$props) $$invalidate(18, value = $$props.value);
    		if ("focusedDay" in $$props) $$invalidate(1, focusedDay = $$props.focusedDay);
    		if ("minDate" in $$props) $$invalidate(2, minDate = $$props.minDate);
    		if ("maxDate" in $$props) $$invalidate(3, maxDate = $$props.maxDate);
    		if ("isFocusTrapDisabled" in $$props) $$invalidate(20, isFocusTrapDisabled = $$props.isFocusTrapDisabled);
    	};

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*value, dateAdapter*/ 262145) {
    			$$invalidate(6, selectedDates = (Array.isArray(value) ? value : [value]).filter(Boolean).map(selectedDateItem => selectedDateItem && dateAdapter.startOfDay(selectedDateItem)));
    		}

    		if ($$self.$$.dirty & /*value, dateAdapter*/ 262145) {
    			$$invalidate(4, currentMonth = value !== null && value !== void 0
    			? value
    			: dateAdapter.date());
    		}

    		if ($$self.$$.dirty & /*dateAdapter, currentMonth*/ 17) {
    			$$invalidate(7, currentMonthNumber = dateAdapter.getMonth(currentMonth));
    		}

    		if ($$self.$$.dirty & /*focusedDay, dateAdapter, currentMonth*/ 19) {
    			needMonthSwitch = Boolean(focusedDay) && !dateAdapter.isSameMonth(currentMonth, focusedDay);
    		}

    		if ($$self.$$.dirty & /*dateAdapter, currentMonth*/ 17) {
    			$$invalidate(8, fullMonth = dateAdapter.getWeekArray(currentMonth));
    		}
    	};

    	return [
    		dateAdapter,
    		focusedDay,
    		minDate,
    		maxDate,
    		currentMonth,
    		datepicker,
    		selectedDates,
    		currentMonthNumber,
    		fullMonth,
    		$view,
    		view,
    		onDaySelect,
    		handleFocus,
    		handleKeyDown,
    		selectNextMonth,
    		selectPreviousMonth,
    		selectYear,
    		toggleYearPicker,
    		value,
    		locale,
    		isFocusTrapDisabled,
    		div_binding
    	];
    }

    class DatePicker extends SvelteComponent {
    	constructor(options) {
    		super();
    		if (!document_1.getElementById("svelte-1gjmd48-style")) add_css();

    		init(this, options, instance, create_fragment, safe_not_equal, {
    			dateAdapter: 0,
    			locale: 19,
    			value: 18,
    			focusedDay: 1,
    			minDate: 2,
    			maxDate: 3,
    			isFocusTrapDisabled: 20
    		});
    	}
    }

    exports.DatePicker = DatePicker;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
