import {
  esm_default
} from "./chunk-KD7MHH2C.js";
import "./chunk-6A2TAOKG.js";
import {
  SvelteComponentDev,
  add_location,
  assign,
  binding_callbacks,
  claim_element,
  compute_rest_props,
  createEventDispatcher,
  create_slot,
  detach_dev,
  dispatch_dev,
  element,
  exclude_internal_props,
  get_all_dirty_from_scope,
  get_slot_changes,
  get_spread_update,
  init,
  insert_hydration_dev,
  onMount,
  safe_not_equal,
  set_attributes,
  tick,
  transition_in,
  transition_out,
  update_slot_base,
  validate_slots
} from "./chunk-K6MJRMI7.js";
import "./chunk-YBOLLQGG.js";

// node_modules/svelte-flatpickr/src/Flatpickr.svelte
var file = "node_modules/svelte-flatpickr/src/Flatpickr.svelte";
function fallback_block(ctx) {
  let input_1;
  let input_1_levels = [
    /*$$restProps*/
    ctx[1]
  ];
  let input_1_data = {};
  for (let i = 0; i < input_1_levels.length; i += 1) {
    input_1_data = assign(input_1_data, input_1_levels[i]);
  }
  const block = {
    c: function create() {
      input_1 = element("input");
      this.h();
    },
    l: function claim(nodes) {
      input_1 = claim_element(nodes, "INPUT", {});
      this.h();
    },
    h: function hydrate() {
      set_attributes(input_1, input_1_data);
      add_location(input_1, file, 128, 1, 2654);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, input_1, anchor);
      if (input_1.autofocus)
        input_1.focus();
      ctx[11](input_1);
    },
    p: function update(ctx2, dirty) {
      set_attributes(input_1, input_1_data = get_spread_update(input_1_levels, [dirty & /*$$restProps*/
      2 && /*$$restProps*/
      ctx2[1]]));
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(input_1);
      ctx[11](null);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: fallback_block.name,
    type: "fallback",
    source: "(128:6)   ",
    ctx
  });
  return block;
}
function create_fragment(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[10].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[9],
    null
  );
  const default_slot_or_fallback = default_slot || fallback_block(ctx);
  const block = {
    c: function create() {
      if (default_slot_or_fallback)
        default_slot_or_fallback.c();
    },
    l: function claim(nodes) {
      if (default_slot_or_fallback)
        default_slot_or_fallback.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot_or_fallback) {
        default_slot_or_fallback.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        512)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[9],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[9]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[9],
              dirty,
              null
            ),
            null
          );
        }
      } else {
        if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*$$restProps, input*/
        3)) {
          default_slot_or_fallback.p(ctx2, !current ? -1 : dirty);
        }
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot_or_fallback, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot_or_fallback, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot_or_fallback)
        default_slot_or_fallback.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function stripOn(hook) {
  return hook.charAt(2).toLowerCase() + hook.substring(3);
}
function getModeValue(instance2, selectedDates) {
  var _a;
  const mode = ((_a = instance2 == null ? void 0 : instance2.config) == null ? void 0 : _a.mode) ?? "single";
  return mode === "single" ? selectedDates[0] : selectedDates;
}
function areValuesEqual(v1, v2) {
  if (v1 == v2)
    return true;
  if (v1 instanceof Date && v2 instanceof Date && v1.valueOf() === v2.valueOf()) {
    return true;
  }
  if (Array.isArray(v1) && Array.isArray(v2) && v1.length === v2.length && v1.every((val, i) => val === v2[i])) {
    return true;
  }
  return false;
}
function instance($$self, $$props, $$invalidate) {
  const omit_props_names = ["value", "formattedValue", "element", "dateFormat", "options", "input", "flatpickr"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Flatpickr", slots, ["default"]);
  const hooks = /* @__PURE__ */ new Set([
    "onChange",
    "onOpen",
    "onClose",
    "onMonthChange",
    "onYearChange",
    "onReady",
    "onValueUpdate",
    "onDayCreate"
  ]);
  let { value = void 0, formattedValue = "", element: element2 = void 0, dateFormat = void 0 } = $$props;
  let { options = {} } = $$props;
  let ready = false;
  let { input = void 0, flatpickr: fp = void 0 } = $$props;
  onMount(() => {
    const elem = element2 ?? input;
    const opts = addHooks(options);
    opts.onReady.push((selectedDates, dateStr, instance2) => {
      if (value === void 0) {
        updateValue(selectedDates, dateStr, instance2);
      }
      tick().then(() => {
        $$invalidate(8, ready = true);
      });
    });
    $$invalidate(3, fp = esm_default(elem, Object.assign(opts, element2 ? { wrap: true } : {})));
    return () => {
      fp.destroy();
    };
  });
  const dispatch = createEventDispatcher();
  function addHooks(opts = {}) {
    opts = Object.assign({}, opts);
    for (const hook of hooks) {
      const firer = (selectedDates, dateStr, instance2) => {
        dispatch(stripOn(hook), [selectedDates, dateStr, instance2]);
      };
      if (hook in opts) {
        if (!Array.isArray(opts[hook]))
          opts[hook] = [opts[hook]];
        opts[hook].push(firer);
      } else {
        opts[hook] = [firer];
      }
    }
    if (opts.onChange && !opts.onChange.includes(updateValue))
      opts.onChange.push(updateValue);
    return opts;
  }
  function updateValue(newValue, dateStr, fp2) {
    const newModeValue = getModeValue(fp2, newValue);
    if (!areValuesEqual(value, newModeValue) && (value || newModeValue)) {
      $$invalidate(2, value = newModeValue);
    }
    $$invalidate(4, formattedValue = dateStr);
  }
  function input_1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      input = $$value;
      $$invalidate(0, input);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("value" in $$new_props)
      $$invalidate(2, value = $$new_props.value);
    if ("formattedValue" in $$new_props)
      $$invalidate(4, formattedValue = $$new_props.formattedValue);
    if ("element" in $$new_props)
      $$invalidate(5, element2 = $$new_props.element);
    if ("dateFormat" in $$new_props)
      $$invalidate(6, dateFormat = $$new_props.dateFormat);
    if ("options" in $$new_props)
      $$invalidate(7, options = $$new_props.options);
    if ("input" in $$new_props)
      $$invalidate(0, input = $$new_props.input);
    if ("flatpickr" in $$new_props)
      $$invalidate(3, fp = $$new_props.flatpickr);
    if ("$$scope" in $$new_props)
      $$invalidate(9, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    onMount,
    createEventDispatcher,
    tick,
    flatpickr: esm_default,
    hooks,
    value,
    formattedValue,
    element: element2,
    dateFormat,
    options,
    ready,
    input,
    fp,
    dispatch,
    addHooks,
    updateValue,
    stripOn,
    getModeValue,
    areValuesEqual
  });
  $$self.$inject_state = ($$new_props) => {
    if ("value" in $$props)
      $$invalidate(2, value = $$new_props.value);
    if ("formattedValue" in $$props)
      $$invalidate(4, formattedValue = $$new_props.formattedValue);
    if ("element" in $$props)
      $$invalidate(5, element2 = $$new_props.element);
    if ("dateFormat" in $$props)
      $$invalidate(6, dateFormat = $$new_props.dateFormat);
    if ("options" in $$props)
      $$invalidate(7, options = $$new_props.options);
    if ("ready" in $$props)
      $$invalidate(8, ready = $$new_props.ready);
    if ("input" in $$props)
      $$invalidate(0, input = $$new_props.input);
    if ("fp" in $$props)
      $$invalidate(3, fp = $$new_props.fp);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*fp, ready, value, dateFormat*/
    332) {
      $:
        if (fp && ready) {
          if (!areValuesEqual(value, getModeValue(fp, fp.selectedDates))) {
            fp.setDate(value, true, dateFormat);
          }
        }
    }
    if ($$self.$$.dirty & /*fp, ready, options*/
    392) {
      $:
        if (fp && ready) {
          for (const [key, val] of Object.entries(addHooks(options))) {
            fp.set(key, val);
          }
        }
    }
  };
  return [
    input,
    $$restProps,
    value,
    fp,
    formattedValue,
    element2,
    dateFormat,
    options,
    ready,
    $$scope,
    slots,
    input_1_binding
  ];
}
var Flatpickr = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, {
      value: 2,
      formattedValue: 4,
      element: 5,
      dateFormat: 6,
      options: 7,
      input: 0,
      flatpickr: 3
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Flatpickr",
      options,
      id: create_fragment.name
    });
  }
  get value() {
    throw new Error("<Flatpickr>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set value(value) {
    throw new Error("<Flatpickr>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get formattedValue() {
    throw new Error("<Flatpickr>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set formattedValue(value) {
    throw new Error("<Flatpickr>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get element() {
    throw new Error("<Flatpickr>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value) {
    throw new Error("<Flatpickr>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get dateFormat() {
    throw new Error("<Flatpickr>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set dateFormat(value) {
    throw new Error("<Flatpickr>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get options() {
    throw new Error("<Flatpickr>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set options(value) {
    throw new Error("<Flatpickr>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get input() {
    throw new Error("<Flatpickr>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set input(value) {
    throw new Error("<Flatpickr>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get flatpickr() {
    throw new Error("<Flatpickr>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set flatpickr(value) {
    throw new Error("<Flatpickr>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Flatpickr_default = Flatpickr;
export {
  Flatpickr_default as default
};
//# sourceMappingURL=svelte-flatpickr.js.map
